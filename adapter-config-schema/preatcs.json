{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "metaConfigurator": {
    "aiExportFormats": {
      "OpenFOAM": "https://github.com/precice/tutorials/blob/develop/perpendicular-flap/fluid-openfoam/system/preciceDict",
      "ISSM": "https://github.com/precice/preeco-orga/blob/main/adapter-config-schema/export-formats/issm-example.yaml"
    }
  },
  "title": "preCICE Adapter and Tooling Configuration Schema (preATCS)",
  "description": "A JSON schema for configurations of adapters and tools within the preCICE ecosystem. Use the schema for validation and LLM-based auto-conversion to other configuration languages (e.g., OpenFOAM dictionary or YAML). The schema is developed as part of the preECO standardization, see https://precice.discourse.group/t/shape-the-future-of-the-precice-ecosystem-the-preeco-project/2019.",
  "properties": {
    "participant_name": {
      "type": "string",
      "description": "Name of the participant.",
      "examples": [
        "Fluid",
        "Solid",
        "Fluid-Left"
      ],
      "minLength": 1,
      "pattern": "^[A-Z][a-zA-Z0-9-]*$"
    },
    "precice_config_file_name": {
      "type": "string",
      "description": "Path to the preCICE configuration file relative to the current working directory of the coupled solver.",
      "default": "../precice-config.xml",
      "minLength": 1,
      "pattern": "^/?(?:\\.\\./)*([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*/)*[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.xml$"
    },
    "interfaces": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "mesh_name": {
            "type": "string",
            "description": "Name of the mesh associated with this interface.",
            "examples": [
              "Fluid-Mesh",
              "Solid-Mesh",
              "Fluid-Upstream-Mesh",
              "Fluid-Upstream-Mesh-Centers",
              "Fluid-Upstream-Mesh-Nodes"
            ],
            "minLength": 6,
            "pattern": "^[A-Z][a-zA-Z0-9]*(?:-[A-Z][a-zA-Z0-9]*)*-Mesh(?:-[A-Z][a-zA-Z0-9]*)*$"
          },
          "patches": {
            "type": "array",
            "description": "List of mesh or geometry patches (boundary or volume) to locate the interface.",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "minItems": 1
          },
          "location": {
            "type": "string",
            "description": "Further specification of mesh locations",
            "minLength": 1,
            "examples": [
              "faceCenters",
              "volumeCenters",
              "faceNodes",
              "nodes"
            ]
          },
          "write_data_names": {
            "type": "array",
            "description": "List of data fields to be written on this mesh.",
            "items": {
              "type": "string",
              "examples": [
                "Force",
                "Displacement",
                "Velocity",
                "Temperature",
                "Heat-Flux",
                "Force1",
                "Force-Left",
                "Heat-Transfer-Coefficient",
                "Sink-Temperature"
              ],
              "minLength": 1,
              "pattern": "^[A-Z][a-zA-Z0-9]*(?:-[A-Za-z0-9]+)*$"
            },
            "minItems": 1
          },
          "read_data_names": {
            "type": "array",
            "description": "List of data fields to be read on this mesh.",
            "items": {
              "type": "string",
              "examples": [
                "Force",
                "Displacement",
                "Velocity",
                "Temperature",
                "Heat-Flux",
                "Force1",
                "Force-Left"
              ],
              "minLength": 1,
              "pattern": "^[A-Z][a-zA-Z0-9]*(?:-[A-Za-z0-9]+)*$"
            },
            "minItems": 1
          },
          "is_received": {
            "type": "boolean",
            "description": "Whether mesh is received from another participant for (direct) API access or not (i.e. provided)."
          }
        },
        "required": [
          "mesh_name"
        ],
        "if": {
          "properties": {
            "is_received": {
              "const": true
            }
          }
        },
        "then": {
          "not": {
            "required": [
              "location"
            ]
          }
        }
      },
      "minItems": 1
    }
  },
  "required": [
    "participant_name",
    "precice_config_file_name",
    "interfaces"
  ]
}
